{
	"info": {
		"_postman_id": "402f2525-8fb7-4e6b-96a4-8e5601077c43",
		"name": "diegoehg-casting-agency-api-endpoints",
		"description": "It contains a set of request to the endpoints hosted at Heroku, with the tokens of three different roles.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Casting assistant tests",
			"item": [
				{
					"name": "GET /movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/movies",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /movies/{movie_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/movies/1",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies",
								"1"
							]
						},
						"description": "Obtains an movie"
					},
					"response": []
				},
				{
					"name": "POST /movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Captain Romero\",\n    \"release_date\": \"2022-03-13\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{heroku-api-hosting}}/movies",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies"
							]
						},
						"description": "It adds a new movie to the database."
					},
					"response": []
				},
				{
					"name": "PATCH /movies/{movie_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Aghata Harkness\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{heroku-api-hosting}}/movies/1",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies",
								"1"
							]
						},
						"description": "It updates the indicated fields of an existent movie."
					},
					"response": []
				},
				{
					"name": "DELETE /movies/{movie_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/movies/7",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies",
								"7"
							]
						},
						"description": "It deletes the movie with the specified ID."
					},
					"response": []
				},
				{
					"name": "GET /actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/actors",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors"
							]
						},
						"description": "It returns a paginated list of actors & the total number of actors."
					},
					"response": []
				},
				{
					"name": "GET /actors/{actor_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/actors/3",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors",
								"3"
							]
						},
						"description": "It returns the actor with the specified ID."
					},
					"response": []
				},
				{
					"name": "POST /actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Randy Newton\",\n    \"age\": 45,\n    \"gender\": \"male\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{heroku-api-hosting}}/actors",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors"
							]
						},
						"description": "It adds a new actor to the database"
					},
					"response": []
				},
				{
					"name": "PATCH /actors/{actor_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Julia Koch\",\n    \"age\": 23\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{heroku-api-hosting}}/actors/1",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors",
								"1"
							]
						},
						"description": "It updates the indicated fields of an existent actor."
					},
					"response": []
				},
				{
					"name": "DELETE /actors/{actor_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/actors/3",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors",
								"3"
							]
						},
						"description": "It deletes the actor with the specified ID."
					},
					"response": []
				}
			],
			"description": "Tests to the API endpoints using a casting assistant token.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{casting-assistant-token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Casting director tests",
			"item": [
				{
					"name": "GET /movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/movies",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies"
							]
						},
						"description": "t returns a paginated list of movies & the total number of movies."
					},
					"response": []
				},
				{
					"name": "GET /movies/{movie_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/movies/1",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies",
								"1"
							]
						},
						"description": "Obtains an movie"
					},
					"response": []
				},
				{
					"name": "POST /movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Lost Samurai\",\n    \"release_date\": \"2023-03-23\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{heroku-api-hosting}}/movies",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies"
							]
						},
						"description": "It adds a new movie to the database."
					},
					"response": []
				},
				{
					"name": "PATCH /movies/{movie_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Lady Sparrow\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{heroku-api-hosting}}/movies/7",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies",
								"7"
							]
						},
						"description": "It updates the indicated fields of an existent movie."
					},
					"response": []
				},
				{
					"name": "DELETE /movies/{movie_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/movies/7",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies",
								"7"
							]
						},
						"description": "It deletes the movie with the specified ID."
					},
					"response": []
				},
				{
					"name": "GET /actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/actors",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors"
							]
						},
						"description": "It returns a paginated list of actors & the total number of actors."
					},
					"response": []
				},
				{
					"name": "GET /actors/{actor_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/actors/3",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors",
								"3"
							]
						},
						"description": "It returns the actor with the specified ID."
					},
					"response": []
				},
				{
					"name": "POST /actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Romeo Santos\",\n    \"age\": 41,\n    \"gender\": \"male\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{heroku-api-hosting}}/actors",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors"
							]
						},
						"description": "It adds a new actor to the database"
					},
					"response": []
				},
				{
					"name": "PATCH /actors/{actor_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"gender\": \"female\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{heroku-api-hosting}}/actors/7",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors",
								"7"
							]
						},
						"description": "It updates the indicated fields of an existent actor."
					},
					"response": []
				},
				{
					"name": "DELETE /actors/{actor_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/actors/11",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors",
								"11"
							]
						},
						"description": "It deletes the actor with the specified ID."
					},
					"response": []
				}
			],
			"description": "Tests to the API endpoints using a casting director token.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{casting-director-token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Executive producers tests",
			"item": [
				{
					"name": "GET /movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/movies",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies"
							]
						},
						"description": "t returns a paginated list of movies & the total number of movies."
					},
					"response": []
				},
				{
					"name": "GET /movies/{movie_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/movies/1",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies",
								"1"
							]
						},
						"description": "Obtains an movie"
					},
					"response": []
				},
				{
					"name": "POST /movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Fast & Furious Remake\",\n    \"release_date\": \"2023-05-21\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{heroku-api-hosting}}/movies",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies"
							]
						},
						"description": "It adds a new movie to the database."
					},
					"response": []
				},
				{
					"name": "PATCH /movies/{movie_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Lady Bug\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{heroku-api-hosting}}/movies/8",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies",
								"8"
							]
						},
						"description": "It updates the indicated fields of an existent movie."
					},
					"response": []
				},
				{
					"name": "DELETE /movies/{movie_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/movies/7",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"movies",
								"7"
							]
						},
						"description": "It deletes the movie with the specified ID."
					},
					"response": []
				},
				{
					"name": "GET /actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/actors",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors"
							]
						},
						"description": "It returns a paginated list of actors & the total number of actors."
					},
					"response": []
				},
				{
					"name": "GET /actors/{actor_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/actors/3",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors",
								"3"
							]
						},
						"description": "It returns the actor with the specified ID."
					},
					"response": []
				},
				{
					"name": "POST /actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Lucinda Lane\",\n    \"age\": 43,\n    \"gender\": \"female\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{heroku-api-hosting}}/actors",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors"
							]
						},
						"description": "It adds a new actor to the database"
					},
					"response": []
				},
				{
					"name": "PATCH /actors/{actor_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Alma Romeo\",\n    \"age\": 22\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{heroku-api-hosting}}/actors/8",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors",
								"8"
							]
						},
						"description": "It updates the indicated fields of an existent actor."
					},
					"response": []
				},
				{
					"name": "DELETE /actors/{actor_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{heroku-api-hosting}}/actors/12",
							"host": [
								"{{heroku-api-hosting}}"
							],
							"path": [
								"actors",
								"12"
							]
						},
						"description": "It deletes the actor with the specified ID."
					},
					"response": []
				}
			],
			"description": "Tests to the API endpoints using a executive producer token.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{executive-producer-token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "casting-assistant-token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IllKTHRSdUJFM1QxVXVNR0VkTWdaeCJ9.eyJpc3MiOiJodHRwczovL2Rldi1iYWxpYW4udXMuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDYwMGRmNmI2ZmZjYmUyMDA2YTg4NmUyZCIsImF1ZCI6ImNhc3RpbmctYWdlbmN5LWF1dGgtYXBpIiwiaWF0IjoxNjE2NDEyNDM4LCJleHAiOjE2MTY0OTg4MzgsImF6cCI6Ik9yQTZkRFZiVmVYZ01YQkFsVHFuWHI4UE9RU2MyYVY4Iiwic2NvcGUiOiIiLCJwZXJtaXNzaW9ucyI6WyJnZXQ6YWN0b3JzIiwiZ2V0Om1vdmllcyJdfQ.CTqWa5XBwyMMaZ6UobUDujenF5ezLewoSyYVd4wM3QBIwStDPOS0QNr9udmFr0mkSQYZYXLCQmSuwd9p1_CZk0HiZaP96rQsTqSKmlBsdOGvS-ZvZ_BiJVGumdrL-GrlZWPZnOcoXyLuKX2haokmS23ZrYYNQBq6U1kz7-sLganj_0X9EDz9fyEDqaSOYlJ-pJt8-7pE8cpfgO41YTm9CwXNX0bwqGn1jdDF9GHQAg7rD9J7e_m2pAbIOABI_qY9ny65m1PmM4YXSwcla4nRWn9XT51jnzkfHdVwBXHNuBVMOm9FIW1RXPmy0LeDwk9Eq78t5fAPCduWdsUlCnalvA"
		},
		{
			"key": "casting-director-token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IllKTHRSdUJFM1QxVXVNR0VkTWdaeCJ9.eyJpc3MiOiJodHRwczovL2Rldi1iYWxpYW4udXMuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDYwNTJiMmQ1ODQzNWRhMDA2ODg0ODI2OSIsImF1ZCI6ImNhc3RpbmctYWdlbmN5LWF1dGgtYXBpIiwiaWF0IjoxNjE2NDEyNDk4LCJleHAiOjE2MTY0OTg4OTgsImF6cCI6Ik9yQTZkRFZiVmVYZ01YQkFsVHFuWHI4UE9RU2MyYVY4Iiwic2NvcGUiOiIiLCJwZXJtaXNzaW9ucyI6WyJkZWxldGU6YWN0b3JzIiwiZ2V0OmFjdG9ycyIsImdldDptb3ZpZXMiLCJwb3N0OmFjdG9ycyIsInVwZGF0ZTphY3RvcnMiLCJ1cGRhdGU6bW92aWVzIl19.QUvFTLUNVEIIIRyuCL1HasGYeVVeBEDxeSjeEFHA4M0F-ygMMCazvDufka3xVEJgzSGsfvOGHs18cwGqj0cytPhN4b1_UBeOE2KkwBF_Gtdm76ySxKm5RN1Ql45KTzHZqx-QrvnZi_g7qbffpuIoUZUYECpJLYNHgZ3ZaJ-Zj65X3AEZV6gnmIGHuh3nMz2bku_YjUMzsLZJ1h4xzdrBobnLs7cYkah54PbYd-xdnlf8FfhF7wYGDJkRTz0JRVE8hggW-9-HH_n4-pBbNCa7O4DSq_MK78Q_j3ZBluqVXplnY_PwW8W-l_sUcasv2GMimhWyogQbSRBd1vS7enaFZg"
		},
		{
			"key": "executive-producer-token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IllKTHRSdUJFM1QxVXVNR0VkTWdaeCJ9.eyJpc3MiOiJodHRwczovL2Rldi1iYWxpYW4udXMuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDYwNTJiNDY2MjYyNjFhMDA2ZmE5MGJhOSIsImF1ZCI6ImNhc3RpbmctYWdlbmN5LWF1dGgtYXBpIiwiaWF0IjoxNjE2NDEyNjA0LCJleHAiOjE2MTY0OTkwMDQsImF6cCI6Ik9yQTZkRFZiVmVYZ01YQkFsVHFuWHI4UE9RU2MyYVY4Iiwic2NvcGUiOiIiLCJwZXJtaXNzaW9ucyI6WyJkZWxldGU6YWN0b3JzIiwiZGVsZXRlOm1vdmllcyIsImdldDphY3RvcnMiLCJnZXQ6bW92aWVzIiwicG9zdDphY3RvcnMiLCJwb3N0Om1vdmllcyIsInVwZGF0ZTphY3RvcnMiLCJ1cGRhdGU6bW92aWVzIl19.eP_CF8BYHL1nfbVXnIc1_Rim4KwDTYO4wL5GfPmmLboNoXuIRYdcjJf7N7XpPVRTx-Uw6mizNtvqesRM8IwoEdix4YnSuoMmxyQ2kjdNo4EE53ZE9FE9YZJoRE3NIqVmcZc-CmI14M8iYlK0vhJGMsPsG0QXsU9Ec1Tr0iEbNetkpS7Vuqzb712JEznaEFqKlELyaaMh7r1Rf4XstC62hUo2m25CHkpAY4ZoJ0dlqcgyHc1DzF6Fe_QdtXpd0YAJvm17Mw9kBcV76RN5_JyWHEZSWNZaqWJwqddjUGsltFHk3ei-dyPe8a9sEcP6bdDUG4F70KWMBYISEjMd79DTyw"
		},
		{
			"key": "heroku-api-hosting",
			"value": "https://diegoehg-casting-agency-api.herokuapp.com"
		}
	]
}